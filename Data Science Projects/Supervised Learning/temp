{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ecd0dfe4",
   "metadata": {},
   "source": [
    "# Kaggle Titanic Project"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "449565f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
      "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'train_test'],\n",
      "      dtype='object')\n",
      "Index(['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch',\n",
      "       'Ticket', 'Fare', 'Cabin', 'Embarked', 'train_test', 'Survived'],\n",
      "      dtype='object')\n",
      "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
      "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'train_test'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "\n",
    "\n",
    "train_data = pd.read_csv('train.csv')\n",
    "test_data = pd.read_csv('test.csv')\n",
    "\n",
    "train_data['train_test'] = 1\n",
    "test_data['train_test'] = 0\n",
    "test_data['Survived'] = np.NaN\n",
    "all_data = pd.concat([train_data, test_data])\n",
    "\n",
    "print(train_data.columns)\n",
    "print(test_data.columns)\n",
    "print(all_data.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "80f6c1ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 13 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      " 12  train_test   891 non-null    int64  \n",
      "dtypes: float64(2), int64(6), object(5)\n",
      "memory usage: 90.6+ KB\n"
     ]
    }
   ],
   "source": [
    "train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7b8d94b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>train_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  train_test  \n",
       "count  891.000000  891.000000       891.0  \n",
       "mean     0.381594   32.204208         1.0  \n",
       "std      0.806057   49.693429         0.0  \n",
       "min      0.000000    0.000000         1.0  \n",
       "25%      0.000000    7.910400         1.0  \n",
       "50%      0.000000   14.454200         1.0  \n",
       "75%      0.000000   31.000000         1.0  \n",
       "max      6.000000  512.329200         1.0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3096f579",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4f28a00",
   "metadata": {},
   "source": [
    "# Data Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3df9d528",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Pclass', 'Age', 'SibSp', 'Parch', 'Fare'], dtype='object')\n",
      "Index(['Survived', 'Sex', 'Ticket', 'Cabin', 'Embarked'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "#Separating categorical values from Numerical values\n",
    "train_num = train_data[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']]\n",
    "train_cat = train_data[['Survived', 'Sex', 'Ticket', 'Cabin', 'Embarked']]\n",
    "print(train_num.columns)\n",
    "print(train_cat.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "00b5006a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_2d95d_row0_col0, #T_2d95d_row1_col1, #T_2d95d_row2_col2, #T_2d95d_row3_col3, #T_2d95d_row4_col4 {\n",
       "  background-color: #b40426;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_2d95d_row0_col1, #T_2d95d_row0_col4, #T_2d95d_row1_col2, #T_2d95d_row1_col3, #T_2d95d_row4_col0 {\n",
       "  background-color: #3b4cc0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_2d95d_row0_col2 {\n",
       "  background-color: #9ebeff;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_2d95d_row0_col3 {\n",
       "  background-color: #7295f4;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_2d95d_row1_col0 {\n",
       "  background-color: #5e7de7;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_2d95d_row1_col4 {\n",
       "  background-color: #c5d6f2;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_2d95d_row2_col0 {\n",
       "  background-color: #c3d5f4;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_2d95d_row2_col1 {\n",
       "  background-color: #485fd1;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_2d95d_row2_col3 {\n",
       "  background-color: #dfdbd9;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_2d95d_row2_col4 {\n",
       "  background-color: #d2dbe8;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_2d95d_row3_col0 {\n",
       "  background-color: #b5cdfa;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_2d95d_row3_col1 {\n",
       "  background-color: #6384eb;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_2d95d_row3_col2 {\n",
       "  background-color: #ead5c9;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_2d95d_row3_col4 {\n",
       "  background-color: #dbdcde;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_2d95d_row4_col1 {\n",
       "  background-color: #abc8fd;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_2d95d_row4_col2 {\n",
       "  background-color: #b2ccfb;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_2d95d_row4_col3 {\n",
       "  background-color: #adc9fd;\n",
       "  color: #000000;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_2d95d_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >Pclass</th>\n",
       "      <th class=\"col_heading level0 col1\" >Age</th>\n",
       "      <th class=\"col_heading level0 col2\" >SibSp</th>\n",
       "      <th class=\"col_heading level0 col3\" >Parch</th>\n",
       "      <th class=\"col_heading level0 col4\" >Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_2d95d_level0_row0\" class=\"row_heading level0 row0\" >Pclass</th>\n",
       "      <td id=\"T_2d95d_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "      <td id=\"T_2d95d_row0_col1\" class=\"data row0 col1\" >-0.369226</td>\n",
       "      <td id=\"T_2d95d_row0_col2\" class=\"data row0 col2\" >0.083081</td>\n",
       "      <td id=\"T_2d95d_row0_col3\" class=\"data row0 col3\" >0.018443</td>\n",
       "      <td id=\"T_2d95d_row0_col4\" class=\"data row0 col4\" >-0.549500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2d95d_level0_row1\" class=\"row_heading level0 row1\" >Age</th>\n",
       "      <td id=\"T_2d95d_row1_col0\" class=\"data row1 col0\" >-0.369226</td>\n",
       "      <td id=\"T_2d95d_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "      <td id=\"T_2d95d_row1_col2\" class=\"data row1 col2\" >-0.308247</td>\n",
       "      <td id=\"T_2d95d_row1_col3\" class=\"data row1 col3\" >-0.189119</td>\n",
       "      <td id=\"T_2d95d_row1_col4\" class=\"data row1 col4\" >0.096067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2d95d_level0_row2\" class=\"row_heading level0 row2\" >SibSp</th>\n",
       "      <td id=\"T_2d95d_row2_col0\" class=\"data row2 col0\" >0.083081</td>\n",
       "      <td id=\"T_2d95d_row2_col1\" class=\"data row2 col1\" >-0.308247</td>\n",
       "      <td id=\"T_2d95d_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "      <td id=\"T_2d95d_row2_col3\" class=\"data row2 col3\" >0.414838</td>\n",
       "      <td id=\"T_2d95d_row2_col4\" class=\"data row2 col4\" >0.159651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2d95d_level0_row3\" class=\"row_heading level0 row3\" >Parch</th>\n",
       "      <td id=\"T_2d95d_row3_col0\" class=\"data row3 col0\" >0.018443</td>\n",
       "      <td id=\"T_2d95d_row3_col1\" class=\"data row3 col1\" >-0.189119</td>\n",
       "      <td id=\"T_2d95d_row3_col2\" class=\"data row3 col2\" >0.414838</td>\n",
       "      <td id=\"T_2d95d_row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
       "      <td id=\"T_2d95d_row3_col4\" class=\"data row3 col4\" >0.216225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2d95d_level0_row4\" class=\"row_heading level0 row4\" >Fare</th>\n",
       "      <td id=\"T_2d95d_row4_col0\" class=\"data row4 col0\" >-0.549500</td>\n",
       "      <td id=\"T_2d95d_row4_col1\" class=\"data row4 col1\" >0.096067</td>\n",
       "      <td id=\"T_2d95d_row4_col2\" class=\"data row4 col2\" >0.159651</td>\n",
       "      <td id=\"T_2d95d_row4_col3\" class=\"data row4 col3\" >0.216225</td>\n",
       "      <td id=\"T_2d95d_row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x2ea7769fb80>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Looking at the Correlation between numerical values\n",
    "corr = train_num.corr()\n",
    "corr.style.background_gradient(cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "79b68605",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Histograms to see the distribution of the numerical data\n",
    "for i in train_num.columns:\n",
    "    plt.hist(train_num[i])\n",
    "    plt.title(i)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dfd5329d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\chris\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\chris\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\chris\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Histograms to see the distribution of the categorical data\n",
    "train_cat_temp = train_data[['Survived', 'Sex', 'Embarked']]\n",
    "\n",
    "for i in train_cat_temp.columns:\n",
    "    sns.barplot(train_cat_temp[i].value_counts().index, train_cat_temp[i].value_counts()).set_title(i)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8ec5f2fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sex       female  male\n",
      "Survived              \n",
      "0             81   468\n",
      "1            233   109\n",
      "\n",
      "Pclass      1   2    3\n",
      "Survived              \n",
      "0          80  97  372\n",
      "1         136  87  119\n",
      "\n",
      "Parch         0     1     2    3    4    5    6\n",
      "Survived                                       \n",
      "0         445.0  53.0  40.0  2.0  4.0  4.0  1.0\n",
      "1         233.0  65.0  40.0  3.0  NaN  1.0  NaN\n",
      "\n",
      "SibSp         0      1     2     3     4    5    8\n",
      "Survived                                          \n",
      "0         398.0   97.0  15.0  12.0  15.0  5.0  7.0\n",
      "1         210.0  112.0  13.0   4.0   3.0  NaN  NaN\n",
      "\n",
      "Embarked   C   Q    S\n",
      "Survived             \n",
      "0         75  47  427\n",
      "1         93  30  217\n"
     ]
    }
   ],
   "source": [
    "#Pivot tables to get some knowledge about who survived\n",
    "print(pd.pivot_table(train_data,index='Survived',columns='Sex', values = 'Ticket', aggfunc='count'))\n",
    "print()\n",
    "print(pd.pivot_table(train_data, index='Survived', columns='Pclass', values= 'Ticket',aggfunc ='count'))\n",
    "print()\n",
    "print(pd.pivot_table(train_data, index='Survived', columns='Parch', values= 'Ticket',aggfunc ='count'))\n",
    "print()\n",
    "print(pd.pivot_table(train_data, index='Survived', columns='SibSp', values= 'Ticket',aggfunc ='count'))\n",
    "print()\n",
    "print(pd.pivot_table(train_data, index='Survived', columns='Embarked', values= 'Ticket',aggfunc ='count'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18ffa1fe",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd7da05a",
   "metadata": {},
   "source": [
    "# Feature Engineering "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3f87c6e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Cabin_class</th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "      <th>F</th>\n",
       "      <th>G</th>\n",
       "      <th>T</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>481.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>206.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Cabin_class    A     B     C     D     E    F    G    T      n\n",
       "Survived                                                      \n",
       "0            8.0  12.0  24.0   8.0   8.0  5.0  2.0  1.0  481.0\n",
       "1            7.0  35.0  35.0  25.0  24.0  8.0  2.0  NaN  206.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting passenger's cabin class \n",
    "train_data['Cabin_class'] = train_data['Cabin'].apply(lambda x: str(x)[0])\n",
    "\n",
    "pd.pivot_table(train_data, index='Survived', columns='Cabin_class', values='Ticket', aggfunc='count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a4ef6647",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a column to identify if the passenger's ticket is purely numerical\n",
    "#Creating a column to identify the letters/word in the passenger's ticket.\n",
    "train_data['Num_ticket'] = train_data.Ticket.apply(lambda x: 1 if x.isnumeric() else 0)\n",
    "train_data['Letters_ticket'] = train_data.Ticket.apply(lambda x: ''.join(x.split(' ')[:-1]).replace('.','').replace('/','').lower() if len(x.split(' ')[:-1])>0 else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fb95a745",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mr              517\n",
      "Miss            182\n",
      "Mrs             125\n",
      "Master           40\n",
      "Dr                7\n",
      "Rev               6\n",
      "Mlle              2\n",
      "Major             2\n",
      "Col               2\n",
      "the Countess      1\n",
      "Capt              1\n",
      "Ms                1\n",
      "Sir               1\n",
      "Lady              1\n",
      "Mme               1\n",
      "Don               1\n",
      "Jonkheer          1\n",
      "Name: Title, dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Title</th>\n",
       "      <th>Capt</th>\n",
       "      <th>Col</th>\n",
       "      <th>Don</th>\n",
       "      <th>Dr</th>\n",
       "      <th>Jonkheer</th>\n",
       "      <th>Lady</th>\n",
       "      <th>Major</th>\n",
       "      <th>Master</th>\n",
       "      <th>Miss</th>\n",
       "      <th>Mlle</th>\n",
       "      <th>Mme</th>\n",
       "      <th>Mr</th>\n",
       "      <th>Mrs</th>\n",
       "      <th>Ms</th>\n",
       "      <th>Rev</th>\n",
       "      <th>Sir</th>\n",
       "      <th>the Countess</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>436.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>127.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Title     Capt  Col  Don   Dr  Jonkheer  Lady  Major  Master   Miss  Mlle  \\\n",
       "Survived                                                                    \n",
       "0          1.0  1.0  1.0  4.0       1.0   NaN    1.0    17.0   55.0   NaN   \n",
       "1          NaN  1.0  NaN  3.0       NaN   1.0    1.0    23.0  127.0   2.0   \n",
       "\n",
       "Title     Mme     Mr   Mrs   Ms  Rev  Sir  the Countess  \n",
       "Survived                                                 \n",
       "0         NaN  436.0  26.0  NaN  6.0  NaN           NaN  \n",
       "1         1.0   81.0  99.0  1.0  NaN  1.0           1.0  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting passenger's Titles\n",
    "train_data['Title'] = train_data.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())\n",
    "\n",
    "print(train_data['Title'].value_counts())\n",
    "pd.pivot_table(train_data, index='Survived', columns='Title', values='Ticket', aggfunc='count')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e7f7b49",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ef25e1d",
   "metadata": {},
   "source": [
    "# Data Pre-Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "967cd12a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Drop Null Values from Embarked\n",
    "\n",
    "train_data.dropna(subset=['Embarked'],inplace=True)\n",
    "train_data['Embarked'].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "29ca1a86",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\chris\\AppData\\Local\\Temp/ipykernel_9048/101832980.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_data.Age[np.isnan(train_data.Age)] = np.nanmean(train_data.Age, axis=0)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Imput data with Mean age\n",
    "train_data.Age[np.isnan(train_data.Age)] = np.nanmean(train_data.Age, axis=0)\n",
    "np.count_nonzero(np.isnan(train_data.Age))\n",
    "##train_data.Age = train_data.Age.fillna(train_data.Age.median())\n",
    "\n",
    "#Normalize fare using logarithm\n",
    "train_data['Norm_fare'] = np.log(train_data['Fare']+1)\n",
    "train_data['Norm_fare'].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "28da16c0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Pclass', 'Age', 'SibSp', 'Parch', 'Norm_fare', 'Num_ticket',\n",
      "       'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_Q', 'Embarked_S',\n",
      "       'Cabin_class_A', 'Cabin_class_B', 'Cabin_class_C', 'Cabin_class_D',\n",
      "       'Cabin_class_E', 'Cabin_class_F', 'Cabin_class_G', 'Cabin_class_T',\n",
      "       'Cabin_class_n', 'Title_Capt', 'Title_Col', 'Title_Don', 'Title_Dr',\n",
      "       'Title_Jonkheer', 'Title_Lady', 'Title_Major', 'Title_Master',\n",
      "       'Title_Miss', 'Title_Mlle', 'Title_Mme', 'Title_Mr', 'Title_Mrs',\n",
      "       'Title_Ms', 'Title_Rev', 'Title_Sir', 'Title_the Countess'],\n",
      "      dtype='object')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Norm_fare</th>\n",
       "      <th>Num_ticket</th>\n",
       "      <th>Sex_female</th>\n",
       "      <th>Sex_male</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>...</th>\n",
       "      <th>Title_Master</th>\n",
       "      <th>Title_Miss</th>\n",
       "      <th>Title_Mlle</th>\n",
       "      <th>Title_Mme</th>\n",
       "      <th>Title_Mr</th>\n",
       "      <th>Title_Mrs</th>\n",
       "      <th>Title_Ms</th>\n",
       "      <th>Title_Rev</th>\n",
       "      <th>Title_Sir</th>\n",
       "      <th>Title_the Countess</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>-5.896199e-01</td>\n",
       "      <td>0.431350</td>\n",
       "      <td>-0.474326</td>\n",
       "      <td>-0.877591</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6.448480e-01</td>\n",
       "      <td>0.431350</td>\n",
       "      <td>-0.474326</td>\n",
       "      <td>1.366380</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>-2.810029e-01</td>\n",
       "      <td>-0.475199</td>\n",
       "      <td>-0.474326</td>\n",
       "      <td>-0.796281</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>4.133853e-01</td>\n",
       "      <td>0.431350</td>\n",
       "      <td>-0.474326</td>\n",
       "      <td>1.066796</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>4.133853e-01</td>\n",
       "      <td>-0.475199</td>\n",
       "      <td>-0.474326</td>\n",
       "      <td>-0.781901</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>2</td>\n",
       "      <td>-2.038487e-01</td>\n",
       "      <td>-0.475199</td>\n",
       "      <td>-0.474326</td>\n",
       "      <td>-0.330815</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>1</td>\n",
       "      <td>-8.210826e-01</td>\n",
       "      <td>-0.475199</td>\n",
       "      <td>-0.474326</td>\n",
       "      <td>0.491068</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>3</td>\n",
       "      <td>-5.482138e-16</td>\n",
       "      <td>0.431350</td>\n",
       "      <td>2.006119</td>\n",
       "      <td>0.245663</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>1</td>\n",
       "      <td>-2.810029e-01</td>\n",
       "      <td>-0.475199</td>\n",
       "      <td>-0.474326</td>\n",
       "      <td>0.491068</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>3</td>\n",
       "      <td>1.819225e-01</td>\n",
       "      <td>-0.475199</td>\n",
       "      <td>-0.474326</td>\n",
       "      <td>-0.816755</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>889 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Pclass           Age     SibSp     Parch  Norm_fare  Num_ticket  \\\n",
       "0        3 -5.896199e-01  0.431350 -0.474326  -0.877591           0   \n",
       "1        1  6.448480e-01  0.431350 -0.474326   1.366380           0   \n",
       "2        3 -2.810029e-01 -0.475199 -0.474326  -0.796281           0   \n",
       "3        1  4.133853e-01  0.431350 -0.474326   1.066796           1   \n",
       "4        3  4.133853e-01 -0.475199 -0.474326  -0.781901           1   \n",
       "..     ...           ...       ...       ...        ...         ...   \n",
       "886      2 -2.038487e-01 -0.475199 -0.474326  -0.330815           1   \n",
       "887      1 -8.210826e-01 -0.475199 -0.474326   0.491068           1   \n",
       "888      3 -5.482138e-16  0.431350  2.006119   0.245663           0   \n",
       "889      1 -2.810029e-01 -0.475199 -0.474326   0.491068           1   \n",
       "890      3  1.819225e-01 -0.475199 -0.474326  -0.816755           1   \n",
       "\n",
       "     Sex_female  Sex_male  Embarked_C  Embarked_Q  ...  Title_Master  \\\n",
       "0             0         1           0           0  ...             0   \n",
       "1             1         0           1           0  ...             0   \n",
       "2             1         0           0           0  ...             0   \n",
       "3             1         0           0           0  ...             0   \n",
       "4             0         1           0           0  ...             0   \n",
       "..          ...       ...         ...         ...  ...           ...   \n",
       "886           0         1           0           0  ...             0   \n",
       "887           1         0           0           0  ...             0   \n",
       "888           1         0           0           0  ...             0   \n",
       "889           0         1           1           0  ...             0   \n",
       "890           0         1           0           1  ...             0   \n",
       "\n",
       "     Title_Miss  Title_Mlle  Title_Mme  Title_Mr  Title_Mrs  Title_Ms  \\\n",
       "0             0           0          0         1          0         0   \n",
       "1             0           0          0         0          1         0   \n",
       "2             1           0          0         0          0         0   \n",
       "3             0           0          0         0          1         0   \n",
       "4             0           0          0         1          0         0   \n",
       "..          ...         ...        ...       ...        ...       ...   \n",
       "886           0           0          0         0          0         0   \n",
       "887           1           0          0         0          0         0   \n",
       "888           1           0          0         0          0         0   \n",
       "889           0           0          0         1          0         0   \n",
       "890           0           0          0         1          0         0   \n",
       "\n",
       "     Title_Rev  Title_Sir  Title_the Countess  \n",
       "0            0          0                   0  \n",
       "1            0          0                   0  \n",
       "2            0          0                   0  \n",
       "3            0          0                   0  \n",
       "4            0          0                   0  \n",
       "..         ...        ...                 ...  \n",
       "886          1          0                   0  \n",
       "887          0          0                   0  \n",
       "888          0          0                   0  \n",
       "889          0          0                   0  \n",
       "890          0          0                   0  \n",
       "\n",
       "[889 rows x 37 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.Pclass = train_data.Pclass.astype('string')\n",
    "\n",
    "#Selecting the relevant Data\n",
    "#Create Dummy variables\n",
    "my_dummies = pd.get_dummies(train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Norm_fare', 'Embarked','Cabin_class', 'Num_ticket', 'Title']])\n",
    "print(my_dummies.columns)\n",
    "\n",
    "#Scale data 0 - 1 \n",
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "train_data_scaled = my_dummies.copy()\n",
    "train_data_scaled[['Age', 'SibSp', 'Parch', 'Norm_fare']] = scaler.fit_transform(train_data_scaled[['Age', 'SibSp', 'Parch', 'Norm_fare']])\n",
    "train_data_scaled\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ee7be5f3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
      "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'train_test',\n",
      "       'Cabin_class', 'Num_ticket', 'Letters_ticket', 'Title', 'Norm_fare'],\n",
      "      dtype='object')\n",
      "   PassengerId  Survived  Pclass  \\\n",
      "0            1       0.0       3   \n",
      "1            2       1.0       1   \n",
      "2            3       1.0       3   \n",
      "3            4       1.0       1   \n",
      "4            5       0.0       3   \n",
      "\n",
      "                                                Name     Sex   Age  SibSp  \\\n",
      "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
      "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
      "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
      "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
      "4                           Allen, Mr. William Henry    male  35.0      0   \n",
      "\n",
      "   Parch            Ticket     Fare Cabin Embarked  train_test Cabin_class  \\\n",
      "0      0         A/5 21171   7.2500   NaN        S           1           n   \n",
      "1      0          PC 17599  71.2833   C85        C           1           C   \n",
      "2      0  STON/O2. 3101282   7.9250   NaN        S           1           n   \n",
      "3      0            113803  53.1000  C123        S           1           C   \n",
      "4      0            373450   8.0500   NaN        S           1           n   \n",
      "\n",
      "   Num_ticket Letters_ticket Title  Norm_fare  \n",
      "0           0             a5    Mr   2.110213  \n",
      "1           0             pc   Mrs   4.280593  \n",
      "2           0         stono2  Miss   2.188856  \n",
      "3           1              0   Mrs   3.990834  \n",
      "4           1              0    Mr   2.202765  \n",
      "Index(['Pclass', 'Age', 'SibSp', 'Parch', 'Norm_fare', 'Num_ticket',\n",
      "       'train_test', 'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_Q',\n",
      "       'Embarked_S', 'Cabin_class_A', 'Cabin_class_B', 'Cabin_class_C',\n",
      "       'Cabin_class_D', 'Cabin_class_E', 'Cabin_class_F', 'Cabin_class_G',\n",
      "       'Cabin_class_T', 'Cabin_class_n', 'Title_Capt', 'Title_Col',\n",
      "       'Title_Don', 'Title_Dona', 'Title_Dr', 'Title_Jonkheer', 'Title_Lady',\n",
      "       'Title_Major', 'Title_Master', 'Title_Miss', 'Title_Mlle', 'Title_Mme',\n",
      "       'Title_Mr', 'Title_Mrs', 'Title_Ms', 'Title_Rev', 'Title_Sir',\n",
      "       'Title_the Countess'],\n",
      "      dtype='object')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\chris\\AppData\\Local\\Temp/ipykernel_9048/2173848910.py:17: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  all_data.Age[np.isnan(all_data.Age)] = np.nanmean(all_data.Age, axis=0)\n"
     ]
    }
   ],
   "source": [
    "#Applying the changes we made to the whole data-set:\n",
    "\n",
    "#Creating a Cabin Classe\n",
    "all_data['Cabin_class'] = all_data['Cabin'].apply(lambda x: str(x)[0])\n",
    "\n",
    "#Collecting Ticket with numbers and letters\n",
    "all_data['Num_ticket'] = all_data.Ticket.apply(lambda x: 1 if x.isnumeric() else 0)\n",
    "all_data['Letters_ticket'] = all_data.Ticket.apply(lambda x: ''.join(x.split(' ')[:-1]).replace('.','').replace('/','').lower() if len(x.split(' ')[:-1])>0 else 0)\n",
    "\n",
    "#Getting the passengers' titles\n",
    "all_data['Title'] = all_data.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())\n",
    "\n",
    "#Dropping Null values from Embarked\n",
    "all_data.dropna(subset=['Embarked'], inplace=True)\n",
    "\n",
    "#Impute data with Mean for age\n",
    "all_data.Age[np.isnan(all_data.Age)] = np.nanmean(all_data.Age, axis=0)\n",
    "\n",
    "#Normalize fare using logarithm\n",
    "all_data['Norm_fare'] = np.log(all_data.Fare+1)\n",
    "\n",
    "#Get Dummies\n",
    "all_dummies = pd.get_dummies(all_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Norm_fare', 'Embarked','Cabin_class', 'Num_ticket', 'Title', 'train_test']])\n",
    "\n",
    "#Scale values\n",
    "all_data_scaled = all_dummies.copy()\n",
    "all_data_scaled[['Age', 'SibSp', 'Parch', 'Norm_fare']] = scaler.fit_transform(all_data_scaled[['Age', 'SibSp', 'Parch', 'Norm_fare']])\n",
    "all_data_scaled\n",
    "\n",
    "\n",
    "print(all_data.columns)\n",
    "print(all_data.head())\n",
    "print(all_data_scaled.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1834e487",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(889, 38)\n",
      "(418, 38)\n",
      "(889,)\n"
     ]
    }
   ],
   "source": [
    "#Spliting the data\n",
    "X_train = all_data_scaled[all_data_scaled.train_test == 1].drop(['train_test'], axis=1)\n",
    "X_test = all_data_scaled[all_data_scaled.train_test == 0].drop(['train_test'], axis=1)\n",
    "\n",
    "y_train = all_data[all_data.train_test==1].Survived\n",
    "\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "print(y_train.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50700be9",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "662decc4",
   "metadata": {},
   "source": [
    "# Model Building "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e51144f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing Modules\n",
    "from sklearn.linear_model import LogisticRegression, RidgeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.model_selection import KFold, cross_val_score\n",
    "from sklearn.model_selection import GridSearchCV, RepeatedStratifiedKFold\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6b226bdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "#I had to remove the Norm_fare features as it was resulting in an infinity or NaN error\n",
    "X_test_temp = X_test.drop(['Norm_fare'], axis = 1)\n",
    "X_train_temp = X_train.drop(['Norm_fare'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2e87cdcc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Testing multiple models\n",
    "models={'Logistic Regression': LogisticRegression(), \n",
    "        'KNN': KNeighborsClassifier(), \n",
    "        'Decision Tree': DecisionTreeClassifier(),\n",
    "        'Random Forest': RandomForestClassifier(),\n",
    "        'SVM': SVC(),\n",
    "        'Ridge Classifier': RidgeClassifier(),\n",
    "        'Gradient Boosting': GradientBoostingClassifier()}\n",
    "results = []\n",
    "\n",
    "for model in models.values():\n",
    "    kf = KFold(n_splits=6, random_state=10, shuffle=True)\n",
    "    cv_results = cross_val_score(model, X_train_temp, y_train, cv=kf)\n",
    "    results.append(cv_results)\n",
    "    \n",
    "plt.boxplot(results,labels=models.keys())\n",
    "plt.rcParams[\"figure.figsize\"] = (15,9)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fe64d19",
   "metadata": {},
   "source": [
    "| Model | Tuned Results | Results w/o Norm_fare|\n",
    "|:------|:--------------|:----------------|\n",
    "|Logistic Regression |82.4%|82.7%|\n",
    "|KNN                 |83.2%|83%|\n",
    "|Decision Tree       |N/A  |N/A|\n",
    "|Random Forest       |81.5%|79.3%|\n",
    "|SVM                 |83.2%|83.3%|\n",
    "|Ridge Classfier     |82.5%|83.1%|\n",
    "|Gradient Boosting   |84.1%|82.7%|\n",
    "\n",
    "Gradient Boosting takes a significanlty longer time to run than the rest of the tuned models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "74779dd2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best 0.827145 using {'C': 1.0, 'penalty': 'l2', 'solver': 'liblinear'}\n",
      "0.823770 (0.035005) with: {'C': 100, 'penalty': 'l2', 'solver': 'newton-cg'}\n",
      "0.823770 (0.035005) with: {'C': 100, 'penalty': 'l2', 'solver': 'lbfgs'}\n",
      "0.823770 (0.035005) with: {'C': 100, 'penalty': 'l2', 'solver': 'liblinear'}\n",
      "0.824523 (0.033538) with: {'C': 10, 'penalty': 'l2', 'solver': 'newton-cg'}\n",
      "0.823774 (0.035215) with: {'C': 10, 'penalty': 'l2', 'solver': 'lbfgs'}\n",
      "0.824898 (0.032918) with: {'C': 10, 'penalty': 'l2', 'solver': 'liblinear'}\n",
      "0.827137 (0.031385) with: {'C': 1.0, 'penalty': 'l2', 'solver': 'newton-cg'}\n",
      "0.826387 (0.031138) with: {'C': 1.0, 'penalty': 'l2', 'solver': 'lbfgs'}\n",
      "0.827145 (0.032126) with: {'C': 1.0, 'penalty': 'l2', 'solver': 'liblinear'}\n",
      "0.822276 (0.036406) with: {'C': 0.1, 'penalty': 'l2', 'solver': 'newton-cg'}\n",
      "0.822276 (0.036406) with: {'C': 0.1, 'penalty': 'l2', 'solver': 'lbfgs'}\n",
      "0.822285 (0.038537) with: {'C': 0.1, 'penalty': 'l2', 'solver': 'liblinear'}\n",
      "0.809917 (0.037172) with: {'C': 0.01, 'penalty': 'l2', 'solver': 'newton-cg'}\n",
      "0.810291 (0.037217) with: {'C': 0.01, 'penalty': 'l2', 'solver': 'lbfgs'}\n",
      "0.796804 (0.039807) with: {'C': 0.01, 'penalty': 'l2', 'solver': 'liblinear'}\n"
     ]
    }
   ],
   "source": [
    "#Tuning the logistic regression algorithm\n",
    "#Finding the best parameters\n",
    "\n",
    "#Params\n",
    "logreg = LogisticRegression()\n",
    "solvers = ['newton-cg','lbfgs','liblinear']\n",
    "penalty = ['l2']\n",
    "c_values = [100,10,1.0,0.1,0.01]\n",
    "\n",
    "#GridSearch\n",
    "grid = dict(solver=solvers, penalty=penalty, C=c_values)\n",
    "cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=10)\n",
    "grid_search = GridSearchCV(estimator=logreg, param_grid=grid, n_jobs=-1, cv=cv,\n",
    "                          scoring='accuracy', error_score=0)\n",
    "grid_results = grid_search.fit(X_train_temp, y_train)\n",
    "\n",
    "#Summarizing results\n",
    "print('Best %f using %s' % (grid_results.best_score_, grid_results.best_params_))\n",
    "means = grid_results.cv_results_['mean_test_score']\n",
    "stds = grid_results.cv_results_['std_test_score']\n",
    "params = grid_results.cv_results_['params']\n",
    "for mean, stdev, param in zip(means,stds,params):\n",
    "    print('%f (%f) with: %r' % (mean,stdev,param))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "438893c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.830154 using {'metric': 'manhattan', 'n_neighbors': 19, 'weights': 'uniform'}\n",
      "0.746506 (0.038308) with: {'metric': 'euclidean', 'n_neighbors': 1, 'weights': 'uniform'}\n",
      "0.746506 (0.038308) with: {'metric': 'euclidean', 'n_neighbors': 1, 'weights': 'distance'}\n",
      "0.793046 (0.036805) with: {'metric': 'euclidean', 'n_neighbors': 3, 'weights': 'uniform'}\n",
      "0.788143 (0.039098) with: {'metric': 'euclidean', 'n_neighbors': 3, 'weights': 'distance'}\n",
      "0.804277 (0.041218) with: {'metric': 'euclidean', 'n_neighbors': 5, 'weights': 'uniform'}\n",
      "0.791139 (0.042181) with: {'metric': 'euclidean', 'n_neighbors': 5, 'weights': 'distance'}\n",
      "0.814781 (0.039840) with: {'metric': 'euclidean', 'n_neighbors': 7, 'weights': 'uniform'}\n",
      "0.796021 (0.040405) with: {'metric': 'euclidean', 'n_neighbors': 7, 'weights': 'distance'}\n",
      "0.820782 (0.037345) with: {'metric': 'euclidean', 'n_neighbors': 9, 'weights': 'uniform'}\n",
      "0.803141 (0.037952) with: {'metric': 'euclidean', 'n_neighbors': 9, 'weights': 'distance'}\n",
      "0.825668 (0.039300) with: {'metric': 'euclidean', 'n_neighbors': 11, 'weights': 'uniform'}\n",
      "0.809163 (0.040006) with: {'metric': 'euclidean', 'n_neighbors': 11, 'weights': 'distance'}\n",
      "0.825285 (0.036183) with: {'metric': 'euclidean', 'n_neighbors': 13, 'weights': 'uniform'}\n",
      "0.807278 (0.038239) with: {'metric': 'euclidean', 'n_neighbors': 13, 'weights': 'distance'}\n",
      "0.827528 (0.039304) with: {'metric': 'euclidean', 'n_neighbors': 15, 'weights': 'uniform'}\n",
      "0.808776 (0.038943) with: {'metric': 'euclidean', 'n_neighbors': 15, 'weights': 'distance'}\n",
      "0.830146 (0.039221) with: {'metric': 'euclidean', 'n_neighbors': 17, 'weights': 'uniform'}\n",
      "0.811019 (0.037360) with: {'metric': 'euclidean', 'n_neighbors': 17, 'weights': 'distance'}\n",
      "0.830150 (0.037676) with: {'metric': 'euclidean', 'n_neighbors': 19, 'weights': 'uniform'}\n",
      "0.811772 (0.036498) with: {'metric': 'euclidean', 'n_neighbors': 19, 'weights': 'distance'}\n",
      "0.755512 (0.038067) with: {'metric': 'manhattan', 'n_neighbors': 1, 'weights': 'uniform'}\n",
      "0.755512 (0.038067) with: {'metric': 'manhattan', 'n_neighbors': 1, 'weights': 'distance'}\n",
      "0.797519 (0.035810) with: {'metric': 'manhattan', 'n_neighbors': 3, 'weights': 'uniform'}\n",
      "0.788496 (0.039043) with: {'metric': 'manhattan', 'n_neighbors': 3, 'weights': 'distance'}\n",
      "0.808031 (0.039000) with: {'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'uniform'}\n",
      "0.790764 (0.043536) with: {'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'}\n",
      "0.820408 (0.040014) with: {'metric': 'manhattan', 'n_neighbors': 7, 'weights': 'uniform'}\n",
      "0.794884 (0.040564) with: {'metric': 'manhattan', 'n_neighbors': 7, 'weights': 'distance'}\n",
      "0.822285 (0.039027) with: {'metric': 'manhattan', 'n_neighbors': 9, 'weights': 'uniform'}\n",
      "0.800515 (0.040347) with: {'metric': 'manhattan', 'n_neighbors': 9, 'weights': 'distance'}\n",
      "0.826038 (0.038735) with: {'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'uniform'}\n",
      "0.805405 (0.039564) with: {'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'distance'}\n",
      "0.826400 (0.036902) with: {'metric': 'manhattan', 'n_neighbors': 13, 'weights': 'uniform'}\n",
      "0.806899 (0.039792) with: {'metric': 'manhattan', 'n_neighbors': 13, 'weights': 'distance'}\n",
      "0.827907 (0.036696) with: {'metric': 'manhattan', 'n_neighbors': 15, 'weights': 'uniform'}\n",
      "0.808397 (0.039108) with: {'metric': 'manhattan', 'n_neighbors': 15, 'weights': 'distance'}\n",
      "0.827528 (0.036414) with: {'metric': 'manhattan', 'n_neighbors': 17, 'weights': 'uniform'}\n",
      "0.810653 (0.038824) with: {'metric': 'manhattan', 'n_neighbors': 17, 'weights': 'distance'}\n",
      "0.830154 (0.039944) with: {'metric': 'manhattan', 'n_neighbors': 19, 'weights': 'uniform'}\n",
      "0.812521 (0.038891) with: {'metric': 'manhattan', 'n_neighbors': 19, 'weights': 'distance'}\n",
      "0.746506 (0.038308) with: {'metric': 'minkowski', 'n_neighbors': 1, 'weights': 'uniform'}\n",
      "0.746506 (0.038308) with: {'metric': 'minkowski', 'n_neighbors': 1, 'weights': 'distance'}\n",
      "0.793046 (0.036805) with: {'metric': 'minkowski', 'n_neighbors': 3, 'weights': 'uniform'}\n",
      "0.788143 (0.039098) with: {'metric': 'minkowski', 'n_neighbors': 3, 'weights': 'distance'}\n",
      "0.804277 (0.041218) with: {'metric': 'minkowski', 'n_neighbors': 5, 'weights': 'uniform'}\n",
      "0.791139 (0.042181) with: {'metric': 'minkowski', 'n_neighbors': 5, 'weights': 'distance'}\n",
      "0.814781 (0.039840) with: {'metric': 'minkowski', 'n_neighbors': 7, 'weights': 'uniform'}\n",
      "0.796021 (0.040405) with: {'metric': 'minkowski', 'n_neighbors': 7, 'weights': 'distance'}\n",
      "0.820782 (0.037345) with: {'metric': 'minkowski', 'n_neighbors': 9, 'weights': 'uniform'}\n",
      "0.803141 (0.037952) with: {'metric': 'minkowski', 'n_neighbors': 9, 'weights': 'distance'}\n",
      "0.825668 (0.039300) with: {'metric': 'minkowski', 'n_neighbors': 11, 'weights': 'uniform'}\n",
      "0.809163 (0.040006) with: {'metric': 'minkowski', 'n_neighbors': 11, 'weights': 'distance'}\n",
      "0.825285 (0.036183) with: {'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'uniform'}\n",
      "0.807278 (0.038239) with: {'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'}\n",
      "0.827528 (0.039304) with: {'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'uniform'}\n",
      "0.808776 (0.038943) with: {'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'}\n",
      "0.830146 (0.039221) with: {'metric': 'minkowski', 'n_neighbors': 17, 'weights': 'uniform'}\n",
      "0.811019 (0.037360) with: {'metric': 'minkowski', 'n_neighbors': 17, 'weights': 'distance'}\n",
      "0.830150 (0.037676) with: {'metric': 'minkowski', 'n_neighbors': 19, 'weights': 'uniform'}\n",
      "0.811772 (0.036498) with: {'metric': 'minkowski', 'n_neighbors': 19, 'weights': 'distance'}\n"
     ]
    }
   ],
   "source": [
    "#Tuning the KNeighbors algorithm\n",
    "#Finding the best parameters\n",
    "\n",
    "#Params\n",
    "knn = KNeighborsClassifier()\n",
    "n_neighbors = range(1,21,2)\n",
    "weights = ['uniform','distance']\n",
    "metric = ['euclidean', 'manhattan', 'minkowski']\n",
    "\n",
    "#Define grid search\n",
    "grid = dict(n_neighbors=n_neighbors, weights=weights, metric=metric)\n",
    "cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
    "grid_search = GridSearchCV(estimator=knn, param_grid=grid, n_jobs=-1, cv=cv,\n",
    "                          scoring='accuracy', error_score=0)\n",
    "grid_results = grid_search.fit(X_train_temp, y_train)\n",
    "\n",
    "#Summarize results\n",
    "print('Best: %f using %s' % (grid_results.best_score_, grid_results.best_params_))\n",
    "means = grid_results.cv_results_['mean_test_score']\n",
    "stds = grid_results.cv_results_['std_test_score']\n",
    "params = grid_search.cv_results_['params']\n",
    "for mean, stdev, param in zip(means, stds, params):\n",
    "    print('%f (%f) with: %r' % (mean, stdev, param))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "a0766dee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.793029 using {'max_features': 'sqrt', 'n_estimators': 10}\n",
      "0.793029 (0.033884) with: {'max_features': 'sqrt', 'n_estimators': 10}\n",
      "0.791530 (0.035129) with: {'max_features': 'sqrt', 'n_estimators': 100}\n",
      "0.791147 (0.035277) with: {'max_features': 'sqrt', 'n_estimators': 1000}\n",
      "0.786291 (0.037071) with: {'max_features': 'log2', 'n_estimators': 10}\n",
      "0.789279 (0.036332) with: {'max_features': 'log2', 'n_estimators': 100}\n",
      "0.787768 (0.035909) with: {'max_features': 'log2', 'n_estimators': 1000}\n"
     ]
    }
   ],
   "source": [
    "#Tuning the Random Forest algorithm\n",
    "#Finding the best parameters\n",
    "\n",
    "#Params\n",
    "rfc = RandomForestClassifier()\n",
    "n_estimators = [10, 100, 1000]\n",
    "max_features = ['sqrt', 'log2']\n",
    "\n",
    "# define grid search\n",
    "grid = dict(n_estimators=n_estimators,max_features=max_features)\n",
    "cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
    "grid_search = GridSearchCV(estimator=rfc, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\n",
    "grid_result = grid_search.fit(X_train_temp, y_train)\n",
    "\n",
    "# summarize results\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "means = grid_result.cv_results_['mean_test_score']\n",
    "stds = grid_result.cv_results_['std_test_score']\n",
    "params = grid_result.cv_results_['params']\n",
    "for mean, stdev, param in zip(means, stds, params):\n",
    "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3a3eefa8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.832784 using {'C': 1.0, 'gamma': 'scale', 'kernel': 'rbf'}\n",
      "0.809525 (0.035399) with: {'C': 50, 'gamma': 'scale', 'kernel': 'poly'}\n",
      "0.814760 (0.036991) with: {'C': 50, 'gamma': 'scale', 'kernel': 'rbf'}\n",
      "0.683184 (0.048967) with: {'C': 50, 'gamma': 'scale', 'kernel': 'sigmoid'}\n",
      "0.813296 (0.037170) with: {'C': 10, 'gamma': 'scale', 'kernel': 'poly'}\n",
      "0.820791 (0.035482) with: {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'}\n",
      "0.682457 (0.046953) with: {'C': 10, 'gamma': 'scale', 'kernel': 'sigmoid'}\n",
      "0.830167 (0.040170) with: {'C': 1.0, 'gamma': 'scale', 'kernel': 'poly'}\n",
      "0.832784 (0.040155) with: {'C': 1.0, 'gamma': 'scale', 'kernel': 'rbf'}\n",
      "0.695940 (0.045669) with: {'C': 1.0, 'gamma': 'scale', 'kernel': 'sigmoid'}\n",
      "0.796025 (0.046939) with: {'C': 0.1, 'gamma': 'scale', 'kernel': 'poly'}\n",
      "0.823029 (0.039880) with: {'C': 0.1, 'gamma': 'scale', 'kernel': 'rbf'}\n",
      "0.776558 (0.045374) with: {'C': 0.1, 'gamma': 'scale', 'kernel': 'sigmoid'}\n",
      "0.617543 (0.001302) with: {'C': 0.01, 'gamma': 'scale', 'kernel': 'poly'}\n",
      "0.617543 (0.001302) with: {'C': 0.01, 'gamma': 'scale', 'kernel': 'rbf'}\n",
      "0.617543 (0.001302) with: {'C': 0.01, 'gamma': 'scale', 'kernel': 'sigmoid'}\n"
     ]
    }
   ],
   "source": [
    "#Tuning the Support Vector Classification algorithm\n",
    "#Finding the best parameters\n",
    "\n",
    "#Params\n",
    "svc = SVC()\n",
    "kernel = ['poly', 'rbf', 'sigmoid']\n",
    "C = [50, 10, 1.0, 0.1, 0.01]\n",
    "gamma = ['scale']\n",
    "\n",
    "# define grid search\n",
    "grid = dict(kernel=kernel,C=C,gamma=gamma)\n",
    "cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
    "grid_search = GridSearchCV(estimator=svc, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\n",
    "grid_result = grid_search.fit(X_train_temp, y_train)\n",
    "\n",
    "# summarize results\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "means = grid_result.cv_results_['mean_test_score']\n",
    "stds = grid_result.cv_results_['std_test_score']\n",
    "params = grid_result.cv_results_['params']\n",
    "for mean, stdev, param in zip(means, stds, params):\n",
    "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "5b5ffb63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.830537 using {'alpha': 0.8}\n",
      "0.830163 (0.037699) with: {'alpha': 0.1}\n",
      "0.830163 (0.037699) with: {'alpha': 0.2}\n",
      "0.830163 (0.037699) with: {'alpha': 0.3}\n",
      "0.830163 (0.037699) with: {'alpha': 0.4}\n",
      "0.830163 (0.037699) with: {'alpha': 0.5}\n",
      "0.830163 (0.037699) with: {'alpha': 0.6}\n",
      "0.830163 (0.037699) with: {'alpha': 0.7}\n",
      "0.830537 (0.038098) with: {'alpha': 0.8}\n",
      "0.830537 (0.038098) with: {'alpha': 0.9}\n",
      "0.830163 (0.037810) with: {'alpha': 1.0}\n"
     ]
    }
   ],
   "source": [
    "#Tuning the Ridge Classifier algorithm\n",
    "#Finding the best parameters\n",
    "\n",
    "#Params\n",
    "ridge = RidgeClassifier()\n",
    "alpha = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n",
    "\n",
    "# define grid search\n",
    "grid = dict(alpha=alpha)\n",
    "cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
    "grid_search = GridSearchCV(estimator=ridge, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\n",
    "grid_result = grid_search.fit(X_train_temp, y_train)\n",
    "\n",
    "# summarize results\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "means = grid_result.cv_results_['mean_test_score']\n",
    "stds = grid_result.cv_results_['std_test_score']\n",
    "params = grid_result.cv_results_['params']\n",
    "for mean, stdev, param in zip(means, stds, params):\n",
    "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "d0bc2918",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.827158 using {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 100, 'subsample': 0.7}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 3, 'n_estimators': 10, 'subsample': 0.5}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 3, 'n_estimators': 10, 'subsample': 0.7}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 3, 'n_estimators': 10, 'subsample': 1.0}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 3, 'n_estimators': 100, 'subsample': 0.5}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 3, 'n_estimators': 100, 'subsample': 0.7}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 3, 'n_estimators': 100, 'subsample': 1.0}\n",
      "0.823004 (0.035876) with: {'learning_rate': 0.001, 'max_depth': 3, 'n_estimators': 1000, 'subsample': 0.5}\n",
      "0.823378 (0.037283) with: {'learning_rate': 0.001, 'max_depth': 3, 'n_estimators': 1000, 'subsample': 0.7}\n",
      "0.821506 (0.037898) with: {'learning_rate': 0.001, 'max_depth': 3, 'n_estimators': 1000, 'subsample': 1.0}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 7, 'n_estimators': 10, 'subsample': 0.5}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 7, 'n_estimators': 10, 'subsample': 0.7}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 7, 'n_estimators': 10, 'subsample': 1.0}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 7, 'n_estimators': 100, 'subsample': 0.5}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 7, 'n_estimators': 100, 'subsample': 0.7}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 7, 'n_estimators': 100, 'subsample': 1.0}\n",
      "0.823783 (0.033981) with: {'learning_rate': 0.001, 'max_depth': 7, 'n_estimators': 1000, 'subsample': 0.5}\n",
      "0.826775 (0.031191) with: {'learning_rate': 0.001, 'max_depth': 7, 'n_estimators': 1000, 'subsample': 0.7}\n",
      "0.824532 (0.037083) with: {'learning_rate': 0.001, 'max_depth': 7, 'n_estimators': 1000, 'subsample': 1.0}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 9, 'n_estimators': 10, 'subsample': 0.5}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 9, 'n_estimators': 10, 'subsample': 0.7}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 9, 'n_estimators': 10, 'subsample': 1.0}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 9, 'n_estimators': 100, 'subsample': 0.5}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 9, 'n_estimators': 100, 'subsample': 0.7}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.001, 'max_depth': 9, 'n_estimators': 100, 'subsample': 1.0}\n",
      "0.821157 (0.035318) with: {'learning_rate': 0.001, 'max_depth': 9, 'n_estimators': 1000, 'subsample': 0.5}\n",
      "0.820391 (0.034074) with: {'learning_rate': 0.001, 'max_depth': 9, 'n_estimators': 1000, 'subsample': 0.7}\n",
      "0.809508 (0.036428) with: {'learning_rate': 0.001, 'max_depth': 9, 'n_estimators': 1000, 'subsample': 1.0}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.01, 'max_depth': 3, 'n_estimators': 10, 'subsample': 0.5}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.01, 'max_depth': 3, 'n_estimators': 10, 'subsample': 0.7}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.01, 'max_depth': 3, 'n_estimators': 10, 'subsample': 1.0}\n",
      "0.820374 (0.035741) with: {'learning_rate': 0.01, 'max_depth': 3, 'n_estimators': 100, 'subsample': 0.5}\n",
      "0.819629 (0.035466) with: {'learning_rate': 0.01, 'max_depth': 3, 'n_estimators': 100, 'subsample': 0.7}\n",
      "0.822255 (0.037976) with: {'learning_rate': 0.01, 'max_depth': 3, 'n_estimators': 100, 'subsample': 1.0}\n",
      "0.824915 (0.033488) with: {'learning_rate': 0.01, 'max_depth': 3, 'n_estimators': 1000, 'subsample': 0.5}\n",
      "0.823421 (0.034501) with: {'learning_rate': 0.01, 'max_depth': 3, 'n_estimators': 1000, 'subsample': 0.7}\n",
      "0.826775 (0.031859) with: {'learning_rate': 0.01, 'max_depth': 3, 'n_estimators': 1000, 'subsample': 1.0}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 10, 'subsample': 0.5}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 10, 'subsample': 0.7}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 10, 'subsample': 1.0}\n",
      "0.821527 (0.031478) with: {'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 100, 'subsample': 0.5}\n",
      "0.824528 (0.034141) with: {'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 100, 'subsample': 0.7}\n",
      "0.825285 (0.037430) with: {'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 100, 'subsample': 1.0}\n",
      "0.806137 (0.034363) with: {'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 1000, 'subsample': 0.5}\n",
      "0.805392 (0.034262) with: {'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 1000, 'subsample': 0.7}\n",
      "0.808384 (0.032970) with: {'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 1000, 'subsample': 1.0}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 10, 'subsample': 0.5}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 10, 'subsample': 0.7}\n",
      "0.617543 (0.001302) with: {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 10, 'subsample': 1.0}\n",
      "0.823783 (0.035078) with: {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 100, 'subsample': 0.5}\n",
      "0.819259 (0.035381) with: {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 100, 'subsample': 0.7}\n",
      "0.810627 (0.037727) with: {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 100, 'subsample': 1.0}\n",
      "0.809146 (0.035723) with: {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 1000, 'subsample': 0.5}\n",
      "0.806895 (0.037855) with: {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 1000, 'subsample': 0.7}\n",
      "0.802009 (0.036064) with: {'learning_rate': 0.01, 'max_depth': 9, 'n_estimators': 1000, 'subsample': 1.0}\n",
      "0.817773 (0.036631) with: {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 10, 'subsample': 0.5}\n",
      "0.823004 (0.034908) with: {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 10, 'subsample': 0.7}\n",
      "0.823004 (0.036802) with: {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 10, 'subsample': 1.0}\n",
      "0.823770 (0.032100) with: {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 100, 'subsample': 0.5}\n",
      "0.827158 (0.034089) with: {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 100, 'subsample': 0.7}\n",
      "0.826396 (0.030552) with: {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 100, 'subsample': 1.0}\n",
      "0.796757 (0.038151) with: {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 1000, 'subsample': 0.5}\n",
      "0.794110 (0.039405) with: {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 1000, 'subsample': 0.7}\n",
      "0.797880 (0.033268) with: {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 1000, 'subsample': 1.0}\n",
      "0.814019 (0.037273) with: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 10, 'subsample': 0.5}\n",
      "0.823395 (0.033771) with: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 10, 'subsample': 0.7}\n",
      "0.823783 (0.037835) with: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 10, 'subsample': 1.0}\n",
      "0.805758 (0.031204) with: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 100, 'subsample': 0.5}\n",
      "0.806529 (0.035084) with: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 100, 'subsample': 0.7}\n",
      "0.808372 (0.035513) with: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 100, 'subsample': 1.0}\n",
      "0.799770 (0.041090) with: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 1000, 'subsample': 0.5}\n",
      "0.802392 (0.039997) with: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 1000, 'subsample': 0.7}\n",
      "0.805397 (0.037070) with: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 1000, 'subsample': 1.0}\n",
      "0.814794 (0.037149) with: {'learning_rate': 0.1, 'max_depth': 9, 'n_estimators': 10, 'subsample': 0.5}\n",
      "0.814407 (0.035959) with: {'learning_rate': 0.1, 'max_depth': 9, 'n_estimators': 10, 'subsample': 0.7}\n",
      "0.811747 (0.035800) with: {'learning_rate': 0.1, 'max_depth': 9, 'n_estimators': 10, 'subsample': 1.0}\n",
      "0.809138 (0.034699) with: {'learning_rate': 0.1, 'max_depth': 9, 'n_estimators': 100, 'subsample': 0.5}\n",
      "0.806520 (0.033279) with: {'learning_rate': 0.1, 'max_depth': 9, 'n_estimators': 100, 'subsample': 0.7}\n",
      "0.802009 (0.035227) with: {'learning_rate': 0.1, 'max_depth': 9, 'n_estimators': 100, 'subsample': 1.0}\n",
      "0.803899 (0.036780) with: {'learning_rate': 0.1, 'max_depth': 9, 'n_estimators': 1000, 'subsample': 0.5}\n",
      "0.803145 (0.043420) with: {'learning_rate': 0.1, 'max_depth': 9, 'n_estimators': 1000, 'subsample': 0.7}\n",
      "0.806150 (0.035248) with: {'learning_rate': 0.1, 'max_depth': 9, 'n_estimators': 1000, 'subsample': 1.0}\n"
     ]
    }
   ],
   "source": [
    "#Tuning the Random Forest algorithm\n",
    "#Finding the best parameters\n",
    "\n",
    "#Params\n",
    "boost = GradientBoostingClassifier()\n",
    "n_estimators = [10, 100, 1000]\n",
    "learning_rate = [0.001, 0.01, 0.1]\n",
    "subsample = [0.5, 0.7, 1.0]\n",
    "max_depth = [3, 7, 9]\n",
    "\n",
    "# define grid search\n",
    "grid = dict(learning_rate=learning_rate, n_estimators=n_estimators, subsample=subsample, max_depth=max_depth)\n",
    "cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
    "grid_search = GridSearchCV(estimator=boost, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\n",
    "grid_result = grid_search.fit(X_train_temp, y_train)\n",
    "\n",
    "# summarize results\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "means = grid_result.cv_results_['mean_test_score']\n",
    "stds = grid_result.cv_results_['std_test_score']\n",
    "params = grid_result.cv_results_['params']\n",
    "for mean, stdev, param in zip(means, stds, params):\n",
    "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf642f8b",
   "metadata": {},
   "source": [
    "| Model Predictions| Survivors | Dead |\n",
    "|:-----------------|:----------|:-----|\n",
    "|Logistic Regression |168|250|\n",
    "|KNN                 |147|271|\n",
    "|Random Forest       |153|265|\n",
    "|SVM                 |160|258|\n",
    "|Ridge Classfier     |168|250|\n",
    "|Gradient Boosting   |155|263|"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "4183b027",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survivors</th>\n",
       "      <th>Dead</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Logistic Regression</th>\n",
       "      <td>168</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KNN</th>\n",
       "      <td>147</td>\n",
       "      <td>271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Random Forest</th>\n",
       "      <td>153</td>\n",
       "      <td>265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SVM</th>\n",
       "      <td>160</td>\n",
       "      <td>258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ridge Classifer</th>\n",
       "      <td>168</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gradient Boosting</th>\n",
       "      <td>155</td>\n",
       "      <td>263</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Survivors  Dead\n",
       "Logistic Regression        168   250\n",
       "KNN                        147   271\n",
       "Random Forest              153   265\n",
       "SVM                        160   258\n",
       "Ridge Classifer            168   250\n",
       "Gradient Boosting          155   263"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Using the best parameters for each model we make perdiction on the test set.\n",
    "\n",
    "#Logistic Regression\n",
    "logreg = LogisticRegression(penalty='l2', C=1.0, solver='liblinear')\n",
    "logreg.fit(X_train_temp,y_train)\n",
    "\n",
    "y_pred_logreg = logreg.predict(X_test_temp)\n",
    "sl = np.count_nonzero(y_pred_logreg == 1.0)\n",
    "dl = np.count_nonzero(y_pred_logreg == 0.0)\n",
    "\n",
    "\n",
    "\n",
    "#KNeighbors\n",
    "knn = KNeighborsClassifier(n_neighbors=19, weights='uniform', metric='manhattan')\n",
    "knn.fit(X_train_temp, y_train)\n",
    "\n",
    "y_pred_knn = knn.predict(X_test_temp)\n",
    "sk = np.count_nonzero(y_pred_knn == 1.0)\n",
    "dk = np.count_nonzero(y_pred_knn == 0.0)\n",
    "\n",
    "\n",
    "\n",
    "#Random Forest Classifier\n",
    "rfc = RandomForestClassifier(n_estimators=10, max_features='sqrt')\n",
    "rfc.fit(X_train_temp, y_train)\n",
    "\n",
    "y_pred_rfc = rfc.predict(X_test_temp)\n",
    "sf = np.count_nonzero(y_pred_rfc == 1.0)\n",
    "df = np.count_nonzero(y_pred_rfc == 0.0)\n",
    "\n",
    "\n",
    "\n",
    "#Support Vector Classification\n",
    "svc = SVC(kernel='rbf', C=1.0, gamma='scale')\n",
    "svc.fit(X_train_temp, y_train)\n",
    "\n",
    "y_pred_svc = svc.predict(X_test_temp)\n",
    "ss = np.count_nonzero(y_pred_svc == 1.0)\n",
    "ds = np.count_nonzero(y_pred_svc == 0.0)\n",
    "\n",
    "\n",
    "\n",
    "#Ridge Classifier\n",
    "ridge = RidgeClassifier(alpha=0.8)\n",
    "ridge.fit(X_train_temp, y_train)\n",
    "\n",
    "y_pred_r = ridge.predict(X_test_temp)\n",
    "sr = np.count_nonzero(y_pred_r == 1.0)\n",
    "dr = np.count_nonzero(y_pred_r == 0.0)\n",
    "\n",
    "\n",
    "\n",
    "#Gradient Boosting Classifier\n",
    "boost = GradientBoostingClassifier(learning_rate = 0.1, n_estimators=100, subsample=0.7, max_depth=3)\n",
    "boost.fit(X_train_temp, y_train)\n",
    "\n",
    "y_pred_gb = boost.predict(X_test_temp)\n",
    "sg = np.count_nonzero(y_pred_gb == 1.0)\n",
    "dg = np.count_nonzero(y_pred_gb == 0.0)\n",
    "\n",
    "\n",
    "#Creating a Pandas DataFrame so it updates automatically in case of changes\n",
    "pre_data = {'Survivors': [sl,sk,sf,ss,sr,sg], 'Dead':[dl,dk,df,ds,dr,dg]}\n",
    "pd.DataFrame(data=pre_data, index=('Logistic Regression', 'KNN', 'Random Forest', 'SVM', 'Ridge Classifer', 'Gradient Boosting'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "5dcfd6f2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>1305</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1306</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>1307</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>1308</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>1309</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived\n",
       "0            892       0.0\n",
       "1            893       1.0\n",
       "2            894       0.0\n",
       "3            895       0.0\n",
       "4            896       1.0\n",
       "..           ...       ...\n",
       "413         1305       0.0\n",
       "414         1306       1.0\n",
       "415         1307       0.0\n",
       "416         1308       0.0\n",
       "417         1309       1.0\n",
       "\n",
       "[418 rows x 2 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Submission File\n",
    "submission_data_logreg = {'PassengerId': test_data.PassengerId, 'Survived': y_pred_logreg}\n",
    "sub_logreg = pd.DataFrame(submission_data_logreg)\n",
    "\n",
    "submission_data_knn = {'PassengerId': test_data.PassengerId, 'Survived': y_pred_knn}\n",
    "sub_knn = pd.DataFrame(submission_data_knn)\n",
    "\n",
    "submission_data_rfc = {'PassengerId': test_data.PassengerId, 'Survived': y_pred_rfc}\n",
    "sub_rfc = pd.DataFrame(submission_data_rfc)\n",
    "\n",
    "submission_data_svc = {'PassengerId': test_data.PassengerId, 'Survived': y_pred_svc}\n",
    "sub_svc = pd.DataFrame(submission_data_svc)\n",
    "\n",
    "submission_data_ridge = {'PassengerId': test_data.PassengerId, 'Survived': y_pred_r}\n",
    "sub_ridge = pd.DataFrame(submission_data_ridge)\n",
    "\n",
    "submission_data_boost = {'PassengerId': test_data.PassengerId, 'Survived': y_pred_gb}\n",
    "sub_boost = pd.DataFrame(submission_data_boost)\n",
    "\n",
    "\n",
    "sub_logreg.to_csv('submission_logreg.csv', index=False)\n",
    "sub_knn.to_csv('submission_knn.csv', index=False)\n",
    "sub_rfc.to_csv('submission_rfc.csv', index=False)\n",
    "sub_svc.to_csv('submission_svc.csv', index=False)\n",
    "sub_ridge.to_csv('submission_ridge.csv', index=False)\n",
    "sub_boost.to_csv('submission_boost.csv', index=False)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
